/*Header Block*/

#include <stdio.h>

#define EMPLOYEES 10

void newhire(float employee_pay[EMPLOYEES], int employee_hours[EMPLOYEES] , int * num);
void updatehours(int employee_hours[EMPLOYEES]);
void print(float employee_pay[EMPLOYEES], int employee_hours[EMPLOYEES] , int num);
void payroll(float employee_pay[EMPLOYEES], int employee_hours[EMPLOYEES] , int num);
int menu();

int main() {
    float employee_pay[EMPLOYEES];
    int employee_hours[EMPLOYEES];
    int num = 0, selection = 0, i, j;

    for(i=0; i<EMPLOYEES; i++) {
        employee_pay[i] = 0;
        employee_hours[i] = 0;
    }

    printf("Welcome to the UCF Games Personnel Records.\n");

    while (selection != 5) {
        selection = menu();

        if (selection == 1)
            newhire(employee_pay, employee_hours, &num);
        else if (selection == 2)
            updatehours(employee_hours);
        else if (selection == 3)
            print(employee_pay, employee_hours, num);
        else if (selection == 4)
            payroll(employee_pay, employee_hours, num);
        else if (selection == 5)
            printf("Thank you for using our system!\n");
        else
            printf("Sorry that was not a valid selection.\n");
    }

    return 0;
}


/*Pre-Conditions:  none
 *Post-Conditions: this function will print the menu, scan in the user's selection, and return that selection
 */
int menu() {

}

/*Pre-Conditions:  This function takes in the employee pay array, which tracks the pay rate for each employee, indexed by employee number.
 *                 This function takes in the employee hours array, which tracks the hours per week for each employee, indexed by employee number.
 *                 This functions takes a pointer to num, which tracks the current number of employees
 *Post-Conditions: This function adds a new employee to the personnel system.  *num is the current employee number in a 0-based numbering system.
 *                 This function asks the user for the number of hours and pay rate for the new employee and records them in the arrays.
 *                 The number of current employees should be incremented before the function concludes.
 */
void newhire(float employee_pay[EMPLOYEES], int employee_hours[EMPLOYEES] , int * num) {

}

/*Pre-Conditions:  This function takes in the employee hours array, which tracks the hours per week for each employee, indexed by employee number.
 *Post-Conditions: This function asks the user which employee to modify.  This value is assumed to be valid.
 *                 The function them asks for the new number of hours and updates the hour array accordingly.
 */
void updatehours(int employee_hours[EMPLOYEES]) {

}

/*Pre-Conditions:  This function takes in the employee pay array, which tracks the pay rate for each employee, indexed by employee number.
 *                 This function takes in the employee hours array, which tracks the hours per week for each employee, indexed by employee number.
 *                 This functions takes an integer num, which tracks the current number of employees
 *Post-Conditions: This function prints the employee information for each employee as specified in the program document.
 */
void print(float employee_pay[EMPLOYEES], int employee_hours[EMPLOYEES], int num) {

}

/*Pre-Conditions:  This function takes in the employee pay array, which tracks the pay rate for each employee, indexed by employee number.
 *                 This function takes in the employee hours array, which tracks the hours per week for each employee, indexed by employee number.
 *                 This functions takes an integer num, which tracks the current number of employees
 *Post-Conditions: This function calculates and prints the employee pay for the week for each employee as specified in the program document.
 */
void payroll(float employee_pay[EMPLOYEES], int employee_hours[EMPLOYEES], int num) {

}
